// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: statedb.proto

#include "statedb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_statedb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeList_statedb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_statedb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fea_statedb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_statedb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetResponse_DbReadLogEntry_DoNotUse_statedb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_statedb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetResponse_SiblingsEntry_DoNotUse_statedb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_statedb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadDBRequest_InputDbEntry_DoNotUse_statedb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_statedb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadProgramDBRequest_InputProgramDbEntry_DoNotUse_statedb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_statedb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultCode_statedb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_statedb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetResponse_DbReadLogEntry_DoNotUse_statedb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_statedb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetResponse_SiblingsEntry_DoNotUse_statedb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_statedb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SiblingList_statedb_2eproto;
namespace statedb {
namespace v1 {
class VersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Version> _instance;
} _Version_default_instance_;
class SetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRequest> _instance;
} _SetRequest_default_instance_;
class GetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRequest> _instance;
} _GetRequest_default_instance_;
class SetProgramRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetProgramRequest> _instance;
} _SetProgramRequest_default_instance_;
class GetProgramRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProgramRequest> _instance;
} _GetProgramRequest_default_instance_;
class LoadDBRequest_InputDbEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadDBRequest_InputDbEntry_DoNotUse> _instance;
} _LoadDBRequest_InputDbEntry_DoNotUse_default_instance_;
class LoadDBRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadDBRequest> _instance;
} _LoadDBRequest_default_instance_;
class LoadProgramDBRequest_InputProgramDbEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadProgramDBRequest_InputProgramDbEntry_DoNotUse> _instance;
} _LoadProgramDBRequest_InputProgramDbEntry_DoNotUse_default_instance_;
class LoadProgramDBRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadProgramDBRequest> _instance;
} _LoadProgramDBRequest_default_instance_;
class SetResponse_SiblingsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetResponse_SiblingsEntry_DoNotUse> _instance;
} _SetResponse_SiblingsEntry_DoNotUse_default_instance_;
class SetResponse_DbReadLogEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetResponse_DbReadLogEntry_DoNotUse> _instance;
} _SetResponse_DbReadLogEntry_DoNotUse_default_instance_;
class SetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetResponse> _instance;
} _SetResponse_default_instance_;
class GetResponse_SiblingsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResponse_SiblingsEntry_DoNotUse> _instance;
} _GetResponse_SiblingsEntry_DoNotUse_default_instance_;
class GetResponse_DbReadLogEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResponse_DbReadLogEntry_DoNotUse> _instance;
} _GetResponse_DbReadLogEntry_DoNotUse_default_instance_;
class GetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResponse> _instance;
} _GetResponse_default_instance_;
class SetProgramResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetProgramResponse> _instance;
} _SetProgramResponse_default_instance_;
class GetProgramResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProgramResponse> _instance;
} _GetProgramResponse_default_instance_;
class FlushResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushResponse> _instance;
} _FlushResponse_default_instance_;
class FeaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fea> _instance;
} _Fea_default_instance_;
class FeListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeList> _instance;
} _FeList_default_instance_;
class SiblingListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SiblingList> _instance;
} _SiblingList_default_instance_;
class ResultCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResultCode> _instance;
} _ResultCode_default_instance_;
}  // namespace v1
}  // namespace statedb
static void InitDefaultsscc_info_FeList_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_FeList_default_instance_;
    new (ptr) ::statedb::v1::FeList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::statedb::v1::FeList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeList_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FeList_statedb_2eproto}, {}};

static void InitDefaultsscc_info_Fea_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_Fea_default_instance_;
    new (ptr) ::statedb::v1::Fea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::statedb::v1::Fea::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fea_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Fea_statedb_2eproto}, {}};

static void InitDefaultsscc_info_FlushResponse_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_FlushResponse_default_instance_;
    new (ptr) ::statedb::v1::FlushResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::statedb::v1::FlushResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlushResponse_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FlushResponse_statedb_2eproto}, {
      &scc_info_ResultCode_statedb_2eproto.base,}};

static void InitDefaultsscc_info_GetProgramRequest_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_GetProgramRequest_default_instance_;
    new (ptr) ::statedb::v1::GetProgramRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::statedb::v1::GetProgramRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProgramRequest_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetProgramRequest_statedb_2eproto}, {
      &scc_info_Fea_statedb_2eproto.base,}};

static void InitDefaultsscc_info_GetProgramResponse_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_GetProgramResponse_default_instance_;
    new (ptr) ::statedb::v1::GetProgramResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::statedb::v1::GetProgramResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProgramResponse_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetProgramResponse_statedb_2eproto}, {
      &scc_info_ResultCode_statedb_2eproto.base,}};

static void InitDefaultsscc_info_GetRequest_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_GetRequest_default_instance_;
    new (ptr) ::statedb::v1::GetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::statedb::v1::GetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRequest_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetRequest_statedb_2eproto}, {
      &scc_info_Fea_statedb_2eproto.base,}};

static void InitDefaultsscc_info_GetResponse_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_GetResponse_default_instance_;
    new (ptr) ::statedb::v1::GetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::statedb::v1::GetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GetResponse_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_GetResponse_statedb_2eproto}, {
      &scc_info_Fea_statedb_2eproto.base,
      &scc_info_GetResponse_SiblingsEntry_DoNotUse_statedb_2eproto.base,
      &scc_info_GetResponse_DbReadLogEntry_DoNotUse_statedb_2eproto.base,
      &scc_info_ResultCode_statedb_2eproto.base,}};

static void InitDefaultsscc_info_GetResponse_DbReadLogEntry_DoNotUse_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_GetResponse_DbReadLogEntry_DoNotUse_default_instance_;
    new (ptr) ::statedb::v1::GetResponse_DbReadLogEntry_DoNotUse();
  }
  ::statedb::v1::GetResponse_DbReadLogEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetResponse_DbReadLogEntry_DoNotUse_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetResponse_DbReadLogEntry_DoNotUse_statedb_2eproto}, {
      &scc_info_FeList_statedb_2eproto.base,}};

static void InitDefaultsscc_info_GetResponse_SiblingsEntry_DoNotUse_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_GetResponse_SiblingsEntry_DoNotUse_default_instance_;
    new (ptr) ::statedb::v1::GetResponse_SiblingsEntry_DoNotUse();
  }
  ::statedb::v1::GetResponse_SiblingsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetResponse_SiblingsEntry_DoNotUse_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetResponse_SiblingsEntry_DoNotUse_statedb_2eproto}, {
      &scc_info_SiblingList_statedb_2eproto.base,}};

static void InitDefaultsscc_info_LoadDBRequest_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_LoadDBRequest_default_instance_;
    new (ptr) ::statedb::v1::LoadDBRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::statedb::v1::LoadDBRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadDBRequest_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadDBRequest_statedb_2eproto}, {
      &scc_info_LoadDBRequest_InputDbEntry_DoNotUse_statedb_2eproto.base,}};

static void InitDefaultsscc_info_LoadDBRequest_InputDbEntry_DoNotUse_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_LoadDBRequest_InputDbEntry_DoNotUse_default_instance_;
    new (ptr) ::statedb::v1::LoadDBRequest_InputDbEntry_DoNotUse();
  }
  ::statedb::v1::LoadDBRequest_InputDbEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadDBRequest_InputDbEntry_DoNotUse_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadDBRequest_InputDbEntry_DoNotUse_statedb_2eproto}, {
      &scc_info_FeList_statedb_2eproto.base,}};

static void InitDefaultsscc_info_LoadProgramDBRequest_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_LoadProgramDBRequest_default_instance_;
    new (ptr) ::statedb::v1::LoadProgramDBRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::statedb::v1::LoadProgramDBRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadProgramDBRequest_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadProgramDBRequest_statedb_2eproto}, {
      &scc_info_LoadProgramDBRequest_InputProgramDbEntry_DoNotUse_statedb_2eproto.base,}};

static void InitDefaultsscc_info_LoadProgramDBRequest_InputProgramDbEntry_DoNotUse_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_LoadProgramDBRequest_InputProgramDbEntry_DoNotUse_default_instance_;
    new (ptr) ::statedb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse();
  }
  ::statedb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadProgramDBRequest_InputProgramDbEntry_DoNotUse_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadProgramDBRequest_InputProgramDbEntry_DoNotUse_statedb_2eproto}, {}};

static void InitDefaultsscc_info_ResultCode_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_ResultCode_default_instance_;
    new (ptr) ::statedb::v1::ResultCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::statedb::v1::ResultCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultCode_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResultCode_statedb_2eproto}, {}};

static void InitDefaultsscc_info_SetProgramRequest_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_SetProgramRequest_default_instance_;
    new (ptr) ::statedb::v1::SetProgramRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::statedb::v1::SetProgramRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetProgramRequest_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetProgramRequest_statedb_2eproto}, {
      &scc_info_Fea_statedb_2eproto.base,}};

static void InitDefaultsscc_info_SetProgramResponse_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_SetProgramResponse_default_instance_;
    new (ptr) ::statedb::v1::SetProgramResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::statedb::v1::SetProgramResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetProgramResponse_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetProgramResponse_statedb_2eproto}, {
      &scc_info_ResultCode_statedb_2eproto.base,}};

static void InitDefaultsscc_info_SetRequest_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_SetRequest_default_instance_;
    new (ptr) ::statedb::v1::SetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::statedb::v1::SetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRequest_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRequest_statedb_2eproto}, {
      &scc_info_Fea_statedb_2eproto.base,}};

static void InitDefaultsscc_info_SetResponse_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_SetResponse_default_instance_;
    new (ptr) ::statedb::v1::SetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::statedb::v1::SetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SetResponse_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SetResponse_statedb_2eproto}, {
      &scc_info_Fea_statedb_2eproto.base,
      &scc_info_SetResponse_SiblingsEntry_DoNotUse_statedb_2eproto.base,
      &scc_info_SetResponse_DbReadLogEntry_DoNotUse_statedb_2eproto.base,
      &scc_info_ResultCode_statedb_2eproto.base,}};

static void InitDefaultsscc_info_SetResponse_DbReadLogEntry_DoNotUse_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_SetResponse_DbReadLogEntry_DoNotUse_default_instance_;
    new (ptr) ::statedb::v1::SetResponse_DbReadLogEntry_DoNotUse();
  }
  ::statedb::v1::SetResponse_DbReadLogEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetResponse_DbReadLogEntry_DoNotUse_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetResponse_DbReadLogEntry_DoNotUse_statedb_2eproto}, {
      &scc_info_FeList_statedb_2eproto.base,}};

static void InitDefaultsscc_info_SetResponse_SiblingsEntry_DoNotUse_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_SetResponse_SiblingsEntry_DoNotUse_default_instance_;
    new (ptr) ::statedb::v1::SetResponse_SiblingsEntry_DoNotUse();
  }
  ::statedb::v1::SetResponse_SiblingsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetResponse_SiblingsEntry_DoNotUse_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetResponse_SiblingsEntry_DoNotUse_statedb_2eproto}, {
      &scc_info_SiblingList_statedb_2eproto.base,}};

static void InitDefaultsscc_info_SiblingList_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_SiblingList_default_instance_;
    new (ptr) ::statedb::v1::SiblingList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::statedb::v1::SiblingList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SiblingList_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SiblingList_statedb_2eproto}, {}};

static void InitDefaultsscc_info_Version_statedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::statedb::v1::_Version_default_instance_;
    new (ptr) ::statedb::v1::Version();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::statedb::v1::Version::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Version_statedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Version_statedb_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_statedb_2eproto[22];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_statedb_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_statedb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_statedb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::Version, v0_0_1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetRequest, old_root_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetRequest, key_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetRequest, value_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetRequest, persistent_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetRequest, details_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetRequest, get_db_read_log_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetRequest, root_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetRequest, key_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetRequest, details_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetRequest, get_db_read_log_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetProgramRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetProgramRequest, key_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetProgramRequest, data_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetProgramRequest, persistent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetProgramRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetProgramRequest, key_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::LoadDBRequest_InputDbEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::LoadDBRequest_InputDbEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::LoadDBRequest_InputDbEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::LoadDBRequest_InputDbEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::LoadDBRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::LoadDBRequest, input_db_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::LoadDBRequest, persistent_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::LoadProgramDBRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::LoadProgramDBRequest, input_program_db_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::LoadProgramDBRequest, persistent_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse_SiblingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse_SiblingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse_SiblingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse_SiblingsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse_DbReadLogEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse_DbReadLogEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse_DbReadLogEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse_DbReadLogEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse, old_root_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse, new_root_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse, key_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse, siblings_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse, ins_key_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse, ins_value_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse, is_old0_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse, old_value_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse, new_value_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse, mode_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse, proof_hash_counter_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse, db_read_log_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetResponse, result_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse_SiblingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse_SiblingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse_SiblingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse_SiblingsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse_DbReadLogEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse_DbReadLogEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse_DbReadLogEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse_DbReadLogEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse, root_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse, key_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse, siblings_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse, ins_key_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse, ins_value_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse, is_old0_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse, value_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse, proof_hash_counter_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse, db_read_log_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetProgramResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SetProgramResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetProgramResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetProgramResponse, data_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::GetProgramResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::FlushResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::FlushResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::Fea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::Fea, fe0_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::Fea, fe1_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::Fea, fe2_),
  PROTOBUF_FIELD_OFFSET(::statedb::v1::Fea, fe3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::FeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::FeList, fe_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SiblingList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::SiblingList, sibling_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::ResultCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::statedb::v1::ResultCode, code_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::statedb::v1::Version)},
  { 6, -1, sizeof(::statedb::v1::SetRequest)},
  { 17, -1, sizeof(::statedb::v1::GetRequest)},
  { 26, -1, sizeof(::statedb::v1::SetProgramRequest)},
  { 34, -1, sizeof(::statedb::v1::GetProgramRequest)},
  { 40, 47, sizeof(::statedb::v1::LoadDBRequest_InputDbEntry_DoNotUse)},
  { 49, -1, sizeof(::statedb::v1::LoadDBRequest)},
  { 56, 63, sizeof(::statedb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse)},
  { 65, -1, sizeof(::statedb::v1::LoadProgramDBRequest)},
  { 72, 79, sizeof(::statedb::v1::SetResponse_SiblingsEntry_DoNotUse)},
  { 81, 88, sizeof(::statedb::v1::SetResponse_DbReadLogEntry_DoNotUse)},
  { 90, -1, sizeof(::statedb::v1::SetResponse)},
  { 108, 115, sizeof(::statedb::v1::GetResponse_SiblingsEntry_DoNotUse)},
  { 117, 124, sizeof(::statedb::v1::GetResponse_DbReadLogEntry_DoNotUse)},
  { 126, -1, sizeof(::statedb::v1::GetResponse)},
  { 141, -1, sizeof(::statedb::v1::SetProgramResponse)},
  { 147, -1, sizeof(::statedb::v1::GetProgramResponse)},
  { 154, -1, sizeof(::statedb::v1::FlushResponse)},
  { 160, -1, sizeof(::statedb::v1::Fea)},
  { 169, -1, sizeof(::statedb::v1::FeList)},
  { 175, -1, sizeof(::statedb::v1::SiblingList)},
  { 181, -1, sizeof(::statedb::v1::ResultCode)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_Version_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_SetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_GetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_SetProgramRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_GetProgramRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_LoadDBRequest_InputDbEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_LoadDBRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_LoadProgramDBRequest_InputProgramDbEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_LoadProgramDBRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_SetResponse_SiblingsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_SetResponse_DbReadLogEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_SetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_GetResponse_SiblingsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_GetResponse_DbReadLogEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_GetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_SetProgramResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_GetProgramResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_FlushResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_Fea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_FeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_SiblingList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statedb::v1::_ResultCode_default_instance_),
};

const char descriptor_table_protodef_statedb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rstatedb.proto\022\nstatedb.v1\032\033google/prot"
  "obuf/empty.proto\"\031\n\007Version\022\016\n\006v0_0_1\030\001 "
  "\001(\t\"\232\001\n\nSetRequest\022!\n\010old_root\030\001 \001(\0132\017.s"
  "tatedb.v1.Fea\022\034\n\003key\030\002 \001(\0132\017.statedb.v1."
  "Fea\022\r\n\005value\030\003 \001(\t\022\022\n\npersistent\030\004 \001(\010\022\017"
  "\n\007details\030\005 \001(\010\022\027\n\017get_db_read_log\030\006 \001(\010"
  "\"s\n\nGetRequest\022\035\n\004root\030\001 \001(\0132\017.statedb.v"
  "1.Fea\022\034\n\003key\030\002 \001(\0132\017.statedb.v1.Fea\022\017\n\007d"
  "etails\030\003 \001(\010\022\027\n\017get_db_read_log\030\004 \001(\010\"S\n"
  "\021SetProgramRequest\022\034\n\003key\030\001 \001(\0132\017.stated"
  "b.v1.Fea\022\014\n\004data\030\002 \001(\014\022\022\n\npersistent\030\003 \001"
  "(\010\"1\n\021GetProgramRequest\022\034\n\003key\030\001 \001(\0132\017.s"
  "tatedb.v1.Fea\"\241\001\n\rLoadDBRequest\0228\n\010input"
  "_db\030\001 \003(\0132&.statedb.v1.LoadDBRequest.Inp"
  "utDbEntry\022\022\n\npersistent\030\002 \001(\010\032B\n\014InputDb"
  "Entry\022\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.stat"
  "edb.v1.FeList:\0028\001\"\261\001\n\024LoadProgramDBReque"
  "st\022N\n\020input_program_db\030\001 \003(\01324.statedb.v"
  "1.LoadProgramDBRequest.InputProgramDbEnt"
  "ry\022\022\n\npersistent\030\002 \001(\010\0325\n\023InputProgramDb"
  "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"\265\004"
  "\n\013SetResponse\022!\n\010old_root\030\001 \001(\0132\017.stated"
  "b.v1.Fea\022!\n\010new_root\030\002 \001(\0132\017.statedb.v1."
  "Fea\022\034\n\003key\030\003 \001(\0132\017.statedb.v1.Fea\0227\n\010sib"
  "lings\030\004 \003(\0132%.statedb.v1.SetResponse.Sib"
  "lingsEntry\022 \n\007ins_key\030\005 \001(\0132\017.statedb.v1"
  ".Fea\022\021\n\tins_value\030\006 \001(\t\022\017\n\007is_old0\030\007 \001(\010"
  "\022\021\n\told_value\030\010 \001(\t\022\021\n\tnew_value\030\t \001(\t\022\014"
  "\n\004mode\030\n \001(\t\022\032\n\022proof_hash_counter\030\013 \001(\004"
  "\022;\n\013db_read_log\030\014 \003(\0132&.statedb.v1.SetRe"
  "sponse.DbReadLogEntry\022&\n\006result\030\r \001(\0132\026."
  "statedb.v1.ResultCode\032H\n\rSiblingsEntry\022\013"
  "\n\003key\030\001 \001(\004\022&\n\005value\030\002 \001(\0132\027.statedb.v1."
  "SiblingList:\0028\001\032D\n\016DbReadLogEntry\022\013\n\003key"
  "\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.statedb.v1.FeLis"
  "t:\0028\001\"\351\003\n\013GetResponse\022\035\n\004root\030\001 \001(\0132\017.st"
  "atedb.v1.Fea\022\034\n\003key\030\002 \001(\0132\017.statedb.v1.F"
  "ea\0227\n\010siblings\030\003 \003(\0132%.statedb.v1.GetRes"
  "ponse.SiblingsEntry\022 \n\007ins_key\030\004 \001(\0132\017.s"
  "tatedb.v1.Fea\022\021\n\tins_value\030\005 \001(\t\022\017\n\007is_o"
  "ld0\030\006 \001(\010\022\r\n\005value\030\007 \001(\t\022\032\n\022proof_hash_c"
  "ounter\030\010 \001(\004\022;\n\013db_read_log\030\t \003(\0132&.stat"
  "edb.v1.GetResponse.DbReadLogEntry\022&\n\006res"
  "ult\030\n \001(\0132\026.statedb.v1.ResultCode\032H\n\rSib"
  "lingsEntry\022\013\n\003key\030\001 \001(\004\022&\n\005value\030\002 \001(\0132\027"
  ".statedb.v1.SiblingList:\0028\001\032D\n\016DbReadLog"
  "Entry\022\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.stat"
  "edb.v1.FeList:\0028\001\"<\n\022SetProgramResponse\022"
  "&\n\006result\030\001 \001(\0132\026.statedb.v1.ResultCode\""
  "J\n\022GetProgramResponse\022\014\n\004data\030\001 \001(\014\022&\n\006r"
  "esult\030\002 \001(\0132\026.statedb.v1.ResultCode\"7\n\rF"
  "lushResponse\022&\n\006result\030\001 \001(\0132\026.statedb.v"
  "1.ResultCode\"9\n\003Fea\022\013\n\003fe0\030\001 \001(\004\022\013\n\003fe1\030"
  "\002 \001(\004\022\013\n\003fe2\030\003 \001(\004\022\013\n\003fe3\030\004 \001(\004\"\024\n\006FeLis"
  "t\022\n\n\002fe\030\001 \003(\004\"\036\n\013SiblingList\022\017\n\007sibling\030"
  "\001 \003(\004\"\317\001\n\nResultCode\022)\n\004code\030\001 \001(\0162\033.sta"
  "tedb.v1.ResultCode.Code\"\225\001\n\004Code\022\024\n\020CODE"
  "_UNSPECIFIED\020\000\022\020\n\014CODE_SUCCESS\020\001\022\031\n\025CODE"
  "_DB_KEY_NOT_FOUND\020\002\022\021\n\rCODE_DB_ERROR\020\003\022\027"
  "\n\023CODE_INTERNAL_ERROR\020\004\022\036\n\032CODE_SMT_INVA"
  "LID_DATA_SIZE\020\0162\354\003\n\016StateDBService\0228\n\003Se"
  "t\022\026.statedb.v1.SetRequest\032\027.statedb.v1.S"
  "etResponse\"\000\0228\n\003Get\022\026.statedb.v1.GetRequ"
  "est\032\027.statedb.v1.GetResponse\"\000\022M\n\nSetPro"
  "gram\022\035.statedb.v1.SetProgramRequest\032\036.st"
  "atedb.v1.SetProgramResponse\"\000\022M\n\nGetProg"
  "ram\022\035.statedb.v1.GetProgramRequest\032\036.sta"
  "tedb.v1.GetProgramResponse\"\000\022=\n\006LoadDB\022\031"
  ".statedb.v1.LoadDBRequest\032\026.google.proto"
  "buf.Empty\"\000\022K\n\rLoadProgramDB\022 .statedb.v"
  "1.LoadProgramDBRequest\032\026.google.protobuf"
  ".Empty\"\000\022<\n\005Flush\022\026.google.protobuf.Empt"
  "y\032\031.statedb.v1.FlushResponse\"\000B5Z3github"
  ".com/0xPolygonHermez/zkevm-node/merkletr"
  "ee/pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_statedb_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_statedb_2eproto_sccs[22] = {
  &scc_info_FeList_statedb_2eproto.base,
  &scc_info_Fea_statedb_2eproto.base,
  &scc_info_FlushResponse_statedb_2eproto.base,
  &scc_info_GetProgramRequest_statedb_2eproto.base,
  &scc_info_GetProgramResponse_statedb_2eproto.base,
  &scc_info_GetRequest_statedb_2eproto.base,
  &scc_info_GetResponse_statedb_2eproto.base,
  &scc_info_GetResponse_DbReadLogEntry_DoNotUse_statedb_2eproto.base,
  &scc_info_GetResponse_SiblingsEntry_DoNotUse_statedb_2eproto.base,
  &scc_info_LoadDBRequest_statedb_2eproto.base,
  &scc_info_LoadDBRequest_InputDbEntry_DoNotUse_statedb_2eproto.base,
  &scc_info_LoadProgramDBRequest_statedb_2eproto.base,
  &scc_info_LoadProgramDBRequest_InputProgramDbEntry_DoNotUse_statedb_2eproto.base,
  &scc_info_ResultCode_statedb_2eproto.base,
  &scc_info_SetProgramRequest_statedb_2eproto.base,
  &scc_info_SetProgramResponse_statedb_2eproto.base,
  &scc_info_SetRequest_statedb_2eproto.base,
  &scc_info_SetResponse_statedb_2eproto.base,
  &scc_info_SetResponse_DbReadLogEntry_DoNotUse_statedb_2eproto.base,
  &scc_info_SetResponse_SiblingsEntry_DoNotUse_statedb_2eproto.base,
  &scc_info_SiblingList_statedb_2eproto.base,
  &scc_info_Version_statedb_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_statedb_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_statedb_2eproto = {
  false, false, descriptor_table_protodef_statedb_2eproto, "statedb.proto", 2973,
  &descriptor_table_statedb_2eproto_once, descriptor_table_statedb_2eproto_sccs, descriptor_table_statedb_2eproto_deps, 22, 1,
  schemas, file_default_instances, TableStruct_statedb_2eproto::offsets,
  file_level_metadata_statedb_2eproto, 22, file_level_enum_descriptors_statedb_2eproto, file_level_service_descriptors_statedb_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_statedb_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_statedb_2eproto)), true);
namespace statedb {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResultCode_Code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_statedb_2eproto);
  return file_level_enum_descriptors_statedb_2eproto[0];
}
bool ResultCode_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ResultCode_Code ResultCode::CODE_UNSPECIFIED;
constexpr ResultCode_Code ResultCode::CODE_SUCCESS;
constexpr ResultCode_Code ResultCode::CODE_DB_KEY_NOT_FOUND;
constexpr ResultCode_Code ResultCode::CODE_DB_ERROR;
constexpr ResultCode_Code ResultCode::CODE_INTERNAL_ERROR;
constexpr ResultCode_Code ResultCode::CODE_SMT_INVALID_DATA_SIZE;
constexpr ResultCode_Code ResultCode::Code_MIN;
constexpr ResultCode_Code ResultCode::Code_MAX;
constexpr int ResultCode::Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Version::InitAsDefaultInstance() {
}
class Version::_Internal {
 public:
};

Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:statedb.v1.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  v0_0_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v0_0_1().empty()) {
    v0_0_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_v0_0_1(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:statedb.v1.Version)
}

void Version::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Version_statedb_2eproto.base);
  v0_0_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:statedb.v1.Version)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Version::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  v0_0_1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Version::ArenaDtor(void* object) {
  Version* _this = reinterpret_cast< Version* >(object);
  (void)_this;
}
void Version::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Version& Version::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Version_statedb_2eproto.base);
  return *internal_default_instance();
}


void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:statedb.v1.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v0_0_1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Version::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string v0_0_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_v0_0_1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "statedb.v1.Version.v0_0_1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Version::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statedb.v1.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string v0_0_1 = 1;
  if (this->v0_0_1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v0_0_1().data(), static_cast<int>(this->_internal_v0_0_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "statedb.v1.Version.v0_0_1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_v0_0_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statedb.v1.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statedb.v1.Version)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string v0_0_1 = 1;
  if (this->v0_0_1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v0_0_1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Version::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statedb.v1.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const Version* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Version>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statedb.v1.Version)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statedb.v1.Version)
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statedb.v1.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v0_0_1().size() > 0) {
    _internal_set_v0_0_1(from._internal_v0_0_1());
  }
}

void Version::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statedb.v1.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statedb.v1.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v0_0_1_.Swap(&other->v0_0_1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRequest::InitAsDefaultInstance() {
  ::statedb::v1::_SetRequest_default_instance_._instance.get_mutable()->old_root_ = const_cast< ::statedb::v1::Fea*>(
      ::statedb::v1::Fea::internal_default_instance());
  ::statedb::v1::_SetRequest_default_instance_._instance.get_mutable()->key_ = const_cast< ::statedb::v1::Fea*>(
      ::statedb::v1::Fea::internal_default_instance());
}
class SetRequest::_Internal {
 public:
  static const ::statedb::v1::Fea& old_root(const SetRequest* msg);
  static const ::statedb::v1::Fea& key(const SetRequest* msg);
};

const ::statedb::v1::Fea&
SetRequest::_Internal::old_root(const SetRequest* msg) {
  return *msg->old_root_;
}
const ::statedb::v1::Fea&
SetRequest::_Internal::key(const SetRequest* msg) {
  return *msg->key_;
}
SetRequest::SetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:statedb.v1.SetRequest)
}
SetRequest::SetRequest(const SetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  if (from._internal_has_old_root()) {
    old_root_ = new ::statedb::v1::Fea(*from.old_root_);
  } else {
    old_root_ = nullptr;
  }
  if (from._internal_has_key()) {
    key_ = new ::statedb::v1::Fea(*from.key_);
  } else {
    key_ = nullptr;
  }
  ::memcpy(&persistent_, &from.persistent_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_db_read_log_) -
    reinterpret_cast<char*>(&persistent_)) + sizeof(get_db_read_log_));
  // @@protoc_insertion_point(copy_constructor:statedb.v1.SetRequest)
}

void SetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRequest_statedb_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&old_root_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_db_read_log_) -
      reinterpret_cast<char*>(&old_root_)) + sizeof(get_db_read_log_));
}

SetRequest::~SetRequest() {
  // @@protoc_insertion_point(destructor:statedb.v1.SetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete old_root_;
  if (this != internal_default_instance()) delete key_;
}

void SetRequest::ArenaDtor(void* object) {
  SetRequest* _this = reinterpret_cast< SetRequest* >(object);
  (void)_this;
}
void SetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRequest& SetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRequest_statedb_2eproto.base);
  return *internal_default_instance();
}


void SetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:statedb.v1.SetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && old_root_ != nullptr) {
    delete old_root_;
  }
  old_root_ = nullptr;
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  ::memset(&persistent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_db_read_log_) -
      reinterpret_cast<char*>(&persistent_)) + sizeof(get_db_read_log_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .statedb.v1.Fea old_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .statedb.v1.Fea key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "statedb.v1.SetRequest.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool persistent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          persistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool details = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          details_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool get_db_read_log = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          get_db_read_log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statedb.v1.SetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .statedb.v1.Fea old_root = 1;
  if (this->has_old_root()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::old_root(this), target, stream);
  }

  // .statedb.v1.Fea key = 2;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "statedb.v1.SetRequest.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // bool persistent = 4;
  if (this->persistent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_persistent(), target);
  }

  // bool details = 5;
  if (this->details() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_details(), target);
  }

  // bool get_db_read_log = 6;
  if (this->get_db_read_log() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_get_db_read_log(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statedb.v1.SetRequest)
  return target;
}

size_t SetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statedb.v1.SetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .statedb.v1.Fea old_root = 1;
  if (this->has_old_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_root_);
  }

  // .statedb.v1.Fea key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // bool persistent = 4;
  if (this->persistent() != 0) {
    total_size += 1 + 1;
  }

  // bool details = 5;
  if (this->details() != 0) {
    total_size += 1 + 1;
  }

  // bool get_db_read_log = 6;
  if (this->get_db_read_log() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statedb.v1.SetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statedb.v1.SetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statedb.v1.SetRequest)
    MergeFrom(*source);
  }
}

void SetRequest::MergeFrom(const SetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statedb.v1.SetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.has_old_root()) {
    _internal_mutable_old_root()->::statedb::v1::Fea::MergeFrom(from._internal_old_root());
  }
  if (from.has_key()) {
    _internal_mutable_key()->::statedb::v1::Fea::MergeFrom(from._internal_key());
  }
  if (from.persistent() != 0) {
    _internal_set_persistent(from._internal_persistent());
  }
  if (from.details() != 0) {
    _internal_set_details(from._internal_details());
  }
  if (from.get_db_read_log() != 0) {
    _internal_set_get_db_read_log(from._internal_get_db_read_log());
  }
}

void SetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statedb.v1.SetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRequest::CopyFrom(const SetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statedb.v1.SetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRequest::IsInitialized() const {
  return true;
}

void SetRequest::InternalSwap(SetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetRequest, get_db_read_log_)
      + sizeof(SetRequest::get_db_read_log_)
      - PROTOBUF_FIELD_OFFSET(SetRequest, old_root_)>(
          reinterpret_cast<char*>(&old_root_),
          reinterpret_cast<char*>(&other->old_root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRequest::InitAsDefaultInstance() {
  ::statedb::v1::_GetRequest_default_instance_._instance.get_mutable()->root_ = const_cast< ::statedb::v1::Fea*>(
      ::statedb::v1::Fea::internal_default_instance());
  ::statedb::v1::_GetRequest_default_instance_._instance.get_mutable()->key_ = const_cast< ::statedb::v1::Fea*>(
      ::statedb::v1::Fea::internal_default_instance());
}
class GetRequest::_Internal {
 public:
  static const ::statedb::v1::Fea& root(const GetRequest* msg);
  static const ::statedb::v1::Fea& key(const GetRequest* msg);
};

const ::statedb::v1::Fea&
GetRequest::_Internal::root(const GetRequest* msg) {
  return *msg->root_;
}
const ::statedb::v1::Fea&
GetRequest::_Internal::key(const GetRequest* msg) {
  return *msg->key_;
}
GetRequest::GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:statedb.v1.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_root()) {
    root_ = new ::statedb::v1::Fea(*from.root_);
  } else {
    root_ = nullptr;
  }
  if (from._internal_has_key()) {
    key_ = new ::statedb::v1::Fea(*from.key_);
  } else {
    key_ = nullptr;
  }
  ::memcpy(&details_, &from.details_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_db_read_log_) -
    reinterpret_cast<char*>(&details_)) + sizeof(get_db_read_log_));
  // @@protoc_insertion_point(copy_constructor:statedb.v1.GetRequest)
}

void GetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRequest_statedb_2eproto.base);
  ::memset(&root_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_db_read_log_) -
      reinterpret_cast<char*>(&root_)) + sizeof(get_db_read_log_));
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:statedb.v1.GetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete root_;
  if (this != internal_default_instance()) delete key_;
}

void GetRequest::ArenaDtor(void* object) {
  GetRequest* _this = reinterpret_cast< GetRequest* >(object);
  (void)_this;
}
void GetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRequest& GetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRequest_statedb_2eproto.base);
  return *internal_default_instance();
}


void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:statedb.v1.GetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  ::memset(&details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_db_read_log_) -
      reinterpret_cast<char*>(&details_)) + sizeof(get_db_read_log_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .statedb.v1.Fea root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .statedb.v1.Fea key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          details_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool get_db_read_log = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          get_db_read_log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statedb.v1.GetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .statedb.v1.Fea root = 1;
  if (this->has_root()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::root(this), target, stream);
  }

  // .statedb.v1.Fea key = 2;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  // bool details = 3;
  if (this->details() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_details(), target);
  }

  // bool get_db_read_log = 4;
  if (this->get_db_read_log() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_get_db_read_log(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statedb.v1.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statedb.v1.GetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .statedb.v1.Fea root = 1;
  if (this->has_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_);
  }

  // .statedb.v1.Fea key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // bool details = 3;
  if (this->details() != 0) {
    total_size += 1 + 1;
  }

  // bool get_db_read_log = 4;
  if (this->get_db_read_log() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statedb.v1.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statedb.v1.GetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statedb.v1.GetRequest)
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statedb.v1.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_root()) {
    _internal_mutable_root()->::statedb::v1::Fea::MergeFrom(from._internal_root());
  }
  if (from.has_key()) {
    _internal_mutable_key()->::statedb::v1::Fea::MergeFrom(from._internal_key());
  }
  if (from.details() != 0) {
    _internal_set_details(from._internal_details());
  }
  if (from.get_db_read_log() != 0) {
    _internal_set_get_db_read_log(from._internal_get_db_read_log());
  }
}

void GetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statedb.v1.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statedb.v1.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRequest, get_db_read_log_)
      + sizeof(GetRequest::get_db_read_log_)
      - PROTOBUF_FIELD_OFFSET(GetRequest, root_)>(
          reinterpret_cast<char*>(&root_),
          reinterpret_cast<char*>(&other->root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetProgramRequest::InitAsDefaultInstance() {
  ::statedb::v1::_SetProgramRequest_default_instance_._instance.get_mutable()->key_ = const_cast< ::statedb::v1::Fea*>(
      ::statedb::v1::Fea::internal_default_instance());
}
class SetProgramRequest::_Internal {
 public:
  static const ::statedb::v1::Fea& key(const SetProgramRequest* msg);
};

const ::statedb::v1::Fea&
SetProgramRequest::_Internal::key(const SetProgramRequest* msg) {
  return *msg->key_;
}
SetProgramRequest::SetProgramRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:statedb.v1.SetProgramRequest)
}
SetProgramRequest::SetProgramRequest(const SetProgramRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_key()) {
    key_ = new ::statedb::v1::Fea(*from.key_);
  } else {
    key_ = nullptr;
  }
  persistent_ = from.persistent_;
  // @@protoc_insertion_point(copy_constructor:statedb.v1.SetProgramRequest)
}

void SetProgramRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetProgramRequest_statedb_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&persistent_) -
      reinterpret_cast<char*>(&key_)) + sizeof(persistent_));
}

SetProgramRequest::~SetProgramRequest() {
  // @@protoc_insertion_point(destructor:statedb.v1.SetProgramRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetProgramRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete key_;
}

void SetProgramRequest::ArenaDtor(void* object) {
  SetProgramRequest* _this = reinterpret_cast< SetProgramRequest* >(object);
  (void)_this;
}
void SetProgramRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetProgramRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetProgramRequest& SetProgramRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetProgramRequest_statedb_2eproto.base);
  return *internal_default_instance();
}


void SetProgramRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:statedb.v1.SetProgramRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  persistent_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetProgramRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .statedb.v1.Fea key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool persistent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          persistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetProgramRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statedb.v1.SetProgramRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .statedb.v1.Fea key = 1;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // bool persistent = 3;
  if (this->persistent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_persistent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statedb.v1.SetProgramRequest)
  return target;
}

size_t SetProgramRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statedb.v1.SetProgramRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .statedb.v1.Fea key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // bool persistent = 3;
  if (this->persistent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetProgramRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statedb.v1.SetProgramRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetProgramRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetProgramRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statedb.v1.SetProgramRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statedb.v1.SetProgramRequest)
    MergeFrom(*source);
  }
}

void SetProgramRequest::MergeFrom(const SetProgramRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statedb.v1.SetProgramRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_key()) {
    _internal_mutable_key()->::statedb::v1::Fea::MergeFrom(from._internal_key());
  }
  if (from.persistent() != 0) {
    _internal_set_persistent(from._internal_persistent());
  }
}

void SetProgramRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statedb.v1.SetProgramRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetProgramRequest::CopyFrom(const SetProgramRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statedb.v1.SetProgramRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProgramRequest::IsInitialized() const {
  return true;
}

void SetProgramRequest::InternalSwap(SetProgramRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetProgramRequest, persistent_)
      + sizeof(SetProgramRequest::persistent_)
      - PROTOBUF_FIELD_OFFSET(SetProgramRequest, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetProgramRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetProgramRequest::InitAsDefaultInstance() {
  ::statedb::v1::_GetProgramRequest_default_instance_._instance.get_mutable()->key_ = const_cast< ::statedb::v1::Fea*>(
      ::statedb::v1::Fea::internal_default_instance());
}
class GetProgramRequest::_Internal {
 public:
  static const ::statedb::v1::Fea& key(const GetProgramRequest* msg);
};

const ::statedb::v1::Fea&
GetProgramRequest::_Internal::key(const GetProgramRequest* msg) {
  return *msg->key_;
}
GetProgramRequest::GetProgramRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:statedb.v1.GetProgramRequest)
}
GetProgramRequest::GetProgramRequest(const GetProgramRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::statedb::v1::Fea(*from.key_);
  } else {
    key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:statedb.v1.GetProgramRequest)
}

void GetProgramRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProgramRequest_statedb_2eproto.base);
  key_ = nullptr;
}

GetProgramRequest::~GetProgramRequest() {
  // @@protoc_insertion_point(destructor:statedb.v1.GetProgramRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProgramRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_;
}

void GetProgramRequest::ArenaDtor(void* object) {
  GetProgramRequest* _this = reinterpret_cast< GetProgramRequest* >(object);
  (void)_this;
}
void GetProgramRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProgramRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProgramRequest& GetProgramRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProgramRequest_statedb_2eproto.base);
  return *internal_default_instance();
}


void GetProgramRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:statedb.v1.GetProgramRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProgramRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .statedb.v1.Fea key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProgramRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statedb.v1.GetProgramRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .statedb.v1.Fea key = 1;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statedb.v1.GetProgramRequest)
  return target;
}

size_t GetProgramRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statedb.v1.GetProgramRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .statedb.v1.Fea key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProgramRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statedb.v1.GetProgramRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProgramRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProgramRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statedb.v1.GetProgramRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statedb.v1.GetProgramRequest)
    MergeFrom(*source);
  }
}

void GetProgramRequest::MergeFrom(const GetProgramRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statedb.v1.GetProgramRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    _internal_mutable_key()->::statedb::v1::Fea::MergeFrom(from._internal_key());
  }
}

void GetProgramRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statedb.v1.GetProgramRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProgramRequest::CopyFrom(const GetProgramRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statedb.v1.GetProgramRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProgramRequest::IsInitialized() const {
  return true;
}

void GetProgramRequest::InternalSwap(GetProgramRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProgramRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

LoadDBRequest_InputDbEntry_DoNotUse::LoadDBRequest_InputDbEntry_DoNotUse() {}
LoadDBRequest_InputDbEntry_DoNotUse::LoadDBRequest_InputDbEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LoadDBRequest_InputDbEntry_DoNotUse::MergeFrom(const LoadDBRequest_InputDbEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LoadDBRequest_InputDbEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void LoadDBRequest_InputDbEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void LoadDBRequest::InitAsDefaultInstance() {
}
class LoadDBRequest::_Internal {
 public:
};

LoadDBRequest::LoadDBRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_db_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:statedb.v1.LoadDBRequest)
}
LoadDBRequest::LoadDBRequest(const LoadDBRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_db_.MergeFrom(from.input_db_);
  persistent_ = from.persistent_;
  // @@protoc_insertion_point(copy_constructor:statedb.v1.LoadDBRequest)
}

void LoadDBRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadDBRequest_statedb_2eproto.base);
  persistent_ = false;
}

LoadDBRequest::~LoadDBRequest() {
  // @@protoc_insertion_point(destructor:statedb.v1.LoadDBRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadDBRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoadDBRequest::ArenaDtor(void* object) {
  LoadDBRequest* _this = reinterpret_cast< LoadDBRequest* >(object);
  (void)_this;
}
void LoadDBRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadDBRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadDBRequest& LoadDBRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadDBRequest_statedb_2eproto.base);
  return *internal_default_instance();
}


void LoadDBRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:statedb.v1.LoadDBRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_db_.Clear();
  persistent_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadDBRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .statedb.v1.FeList> input_db = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&input_db_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool persistent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          persistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadDBRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statedb.v1.LoadDBRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .statedb.v1.FeList> input_db = 1;
  if (!this->_internal_input_db().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::statedb::v1::FeList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "statedb.v1.LoadDBRequest.InputDbEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_input_db().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_input_db().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::statedb::v1::FeList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::statedb::v1::FeList >::const_iterator
          it = this->_internal_input_db().begin();
          it != this->_internal_input_db().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LoadDBRequest_InputDbEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::statedb::v1::FeList >::const_iterator
          it = this->_internal_input_db().begin();
          it != this->_internal_input_db().end(); ++it) {
        target = LoadDBRequest_InputDbEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool persistent = 2;
  if (this->persistent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_persistent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statedb.v1.LoadDBRequest)
  return target;
}

size_t LoadDBRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statedb.v1.LoadDBRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .statedb.v1.FeList> input_db = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_db_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::statedb::v1::FeList >::const_iterator
      it = this->_internal_input_db().begin();
      it != this->_internal_input_db().end(); ++it) {
    total_size += LoadDBRequest_InputDbEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bool persistent = 2;
  if (this->persistent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadDBRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statedb.v1.LoadDBRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadDBRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadDBRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statedb.v1.LoadDBRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statedb.v1.LoadDBRequest)
    MergeFrom(*source);
  }
}

void LoadDBRequest::MergeFrom(const LoadDBRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statedb.v1.LoadDBRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_db_.MergeFrom(from.input_db_);
  if (from.persistent() != 0) {
    _internal_set_persistent(from._internal_persistent());
  }
}

void LoadDBRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statedb.v1.LoadDBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadDBRequest::CopyFrom(const LoadDBRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statedb.v1.LoadDBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadDBRequest::IsInitialized() const {
  return true;
}

void LoadDBRequest::InternalSwap(LoadDBRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_db_.Swap(&other->input_db_);
  swap(persistent_, other->persistent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadDBRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

LoadProgramDBRequest_InputProgramDbEntry_DoNotUse::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse() {}
LoadProgramDBRequest_InputProgramDbEntry_DoNotUse::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LoadProgramDBRequest_InputProgramDbEntry_DoNotUse::MergeFrom(const LoadProgramDBRequest_InputProgramDbEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LoadProgramDBRequest_InputProgramDbEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void LoadProgramDBRequest_InputProgramDbEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void LoadProgramDBRequest::InitAsDefaultInstance() {
}
class LoadProgramDBRequest::_Internal {
 public:
};

LoadProgramDBRequest::LoadProgramDBRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_program_db_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:statedb.v1.LoadProgramDBRequest)
}
LoadProgramDBRequest::LoadProgramDBRequest(const LoadProgramDBRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_program_db_.MergeFrom(from.input_program_db_);
  persistent_ = from.persistent_;
  // @@protoc_insertion_point(copy_constructor:statedb.v1.LoadProgramDBRequest)
}

void LoadProgramDBRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadProgramDBRequest_statedb_2eproto.base);
  persistent_ = false;
}

LoadProgramDBRequest::~LoadProgramDBRequest() {
  // @@protoc_insertion_point(destructor:statedb.v1.LoadProgramDBRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadProgramDBRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoadProgramDBRequest::ArenaDtor(void* object) {
  LoadProgramDBRequest* _this = reinterpret_cast< LoadProgramDBRequest* >(object);
  (void)_this;
}
void LoadProgramDBRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadProgramDBRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadProgramDBRequest& LoadProgramDBRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadProgramDBRequest_statedb_2eproto.base);
  return *internal_default_instance();
}


void LoadProgramDBRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:statedb.v1.LoadProgramDBRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_program_db_.Clear();
  persistent_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadProgramDBRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, bytes> input_program_db = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&input_program_db_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool persistent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          persistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadProgramDBRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statedb.v1.LoadProgramDBRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bytes> input_program_db = 1;
  if (!this->_internal_input_program_db().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "statedb.v1.LoadProgramDBRequest.InputProgramDbEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_input_program_db().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_input_program_db().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_input_program_db().begin();
          it != this->_internal_input_program_db().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LoadProgramDBRequest_InputProgramDbEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_input_program_db().begin();
          it != this->_internal_input_program_db().end(); ++it) {
        target = LoadProgramDBRequest_InputProgramDbEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool persistent = 2;
  if (this->persistent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_persistent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statedb.v1.LoadProgramDBRequest)
  return target;
}

size_t LoadProgramDBRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statedb.v1.LoadProgramDBRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> input_program_db = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_program_db_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_input_program_db().begin();
      it != this->_internal_input_program_db().end(); ++it) {
    total_size += LoadProgramDBRequest_InputProgramDbEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bool persistent = 2;
  if (this->persistent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadProgramDBRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statedb.v1.LoadProgramDBRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadProgramDBRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadProgramDBRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statedb.v1.LoadProgramDBRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statedb.v1.LoadProgramDBRequest)
    MergeFrom(*source);
  }
}

void LoadProgramDBRequest::MergeFrom(const LoadProgramDBRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statedb.v1.LoadProgramDBRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_program_db_.MergeFrom(from.input_program_db_);
  if (from.persistent() != 0) {
    _internal_set_persistent(from._internal_persistent());
  }
}

void LoadProgramDBRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statedb.v1.LoadProgramDBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadProgramDBRequest::CopyFrom(const LoadProgramDBRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statedb.v1.LoadProgramDBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadProgramDBRequest::IsInitialized() const {
  return true;
}

void LoadProgramDBRequest::InternalSwap(LoadProgramDBRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_program_db_.Swap(&other->input_program_db_);
  swap(persistent_, other->persistent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadProgramDBRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SetResponse_SiblingsEntry_DoNotUse::SetResponse_SiblingsEntry_DoNotUse() {}
SetResponse_SiblingsEntry_DoNotUse::SetResponse_SiblingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SetResponse_SiblingsEntry_DoNotUse::MergeFrom(const SetResponse_SiblingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SetResponse_SiblingsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SetResponse_SiblingsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

SetResponse_DbReadLogEntry_DoNotUse::SetResponse_DbReadLogEntry_DoNotUse() {}
SetResponse_DbReadLogEntry_DoNotUse::SetResponse_DbReadLogEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SetResponse_DbReadLogEntry_DoNotUse::MergeFrom(const SetResponse_DbReadLogEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SetResponse_DbReadLogEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SetResponse_DbReadLogEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SetResponse::InitAsDefaultInstance() {
  ::statedb::v1::_SetResponse_default_instance_._instance.get_mutable()->old_root_ = const_cast< ::statedb::v1::Fea*>(
      ::statedb::v1::Fea::internal_default_instance());
  ::statedb::v1::_SetResponse_default_instance_._instance.get_mutable()->new_root_ = const_cast< ::statedb::v1::Fea*>(
      ::statedb::v1::Fea::internal_default_instance());
  ::statedb::v1::_SetResponse_default_instance_._instance.get_mutable()->key_ = const_cast< ::statedb::v1::Fea*>(
      ::statedb::v1::Fea::internal_default_instance());
  ::statedb::v1::_SetResponse_default_instance_._instance.get_mutable()->ins_key_ = const_cast< ::statedb::v1::Fea*>(
      ::statedb::v1::Fea::internal_default_instance());
  ::statedb::v1::_SetResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::statedb::v1::ResultCode*>(
      ::statedb::v1::ResultCode::internal_default_instance());
}
class SetResponse::_Internal {
 public:
  static const ::statedb::v1::Fea& old_root(const SetResponse* msg);
  static const ::statedb::v1::Fea& new_root(const SetResponse* msg);
  static const ::statedb::v1::Fea& key(const SetResponse* msg);
  static const ::statedb::v1::Fea& ins_key(const SetResponse* msg);
  static const ::statedb::v1::ResultCode& result(const SetResponse* msg);
};

const ::statedb::v1::Fea&
SetResponse::_Internal::old_root(const SetResponse* msg) {
  return *msg->old_root_;
}
const ::statedb::v1::Fea&
SetResponse::_Internal::new_root(const SetResponse* msg) {
  return *msg->new_root_;
}
const ::statedb::v1::Fea&
SetResponse::_Internal::key(const SetResponse* msg) {
  return *msg->key_;
}
const ::statedb::v1::Fea&
SetResponse::_Internal::ins_key(const SetResponse* msg) {
  return *msg->ins_key_;
}
const ::statedb::v1::ResultCode&
SetResponse::_Internal::result(const SetResponse* msg) {
  return *msg->result_;
}
SetResponse::SetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  siblings_(arena),
  db_read_log_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:statedb.v1.SetResponse)
}
SetResponse::SetResponse(const SetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  siblings_.MergeFrom(from.siblings_);
  db_read_log_.MergeFrom(from.db_read_log_);
  ins_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ins_value().empty()) {
    ins_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ins_value(),
      GetArena());
  }
  old_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_value().empty()) {
    old_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_old_value(),
      GetArena());
  }
  new_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_value().empty()) {
    new_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_value(),
      GetArena());
  }
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mode().empty()) {
    mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mode(),
      GetArena());
  }
  if (from._internal_has_old_root()) {
    old_root_ = new ::statedb::v1::Fea(*from.old_root_);
  } else {
    old_root_ = nullptr;
  }
  if (from._internal_has_new_root()) {
    new_root_ = new ::statedb::v1::Fea(*from.new_root_);
  } else {
    new_root_ = nullptr;
  }
  if (from._internal_has_key()) {
    key_ = new ::statedb::v1::Fea(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_ins_key()) {
    ins_key_ = new ::statedb::v1::Fea(*from.ins_key_);
  } else {
    ins_key_ = nullptr;
  }
  if (from._internal_has_result()) {
    result_ = new ::statedb::v1::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  ::memcpy(&proof_hash_counter_, &from.proof_hash_counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_old0_) -
    reinterpret_cast<char*>(&proof_hash_counter_)) + sizeof(is_old0_));
  // @@protoc_insertion_point(copy_constructor:statedb.v1.SetResponse)
}

void SetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetResponse_statedb_2eproto.base);
  ins_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&old_root_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_old0_) -
      reinterpret_cast<char*>(&old_root_)) + sizeof(is_old0_));
}

SetResponse::~SetResponse() {
  // @@protoc_insertion_point(destructor:statedb.v1.SetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ins_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete old_root_;
  if (this != internal_default_instance()) delete new_root_;
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete ins_key_;
  if (this != internal_default_instance()) delete result_;
}

void SetResponse::ArenaDtor(void* object) {
  SetResponse* _this = reinterpret_cast< SetResponse* >(object);
  (void)_this;
}
void SetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetResponse& SetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetResponse_statedb_2eproto.base);
  return *internal_default_instance();
}


void SetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:statedb.v1.SetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  siblings_.Clear();
  db_read_log_.Clear();
  ins_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && old_root_ != nullptr) {
    delete old_root_;
  }
  old_root_ = nullptr;
  if (GetArena() == nullptr && new_root_ != nullptr) {
    delete new_root_;
  }
  new_root_ = nullptr;
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArena() == nullptr && ins_key_ != nullptr) {
    delete ins_key_;
  }
  ins_key_ = nullptr;
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  ::memset(&proof_hash_counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_old0_) -
      reinterpret_cast<char*>(&proof_hash_counter_)) + sizeof(is_old0_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .statedb.v1.Fea old_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .statedb.v1.Fea new_root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .statedb.v1.Fea key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint64, .statedb.v1.SiblingList> siblings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&siblings_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .statedb.v1.Fea ins_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ins_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ins_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_ins_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "statedb.v1.SetResponse.ins_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_old0 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_old0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string old_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_old_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "statedb.v1.SetResponse.old_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_new_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "statedb.v1.SetResponse.new_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "statedb.v1.SetResponse.mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 proof_hash_counter = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          proof_hash_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .statedb.v1.FeList> db_read_log = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&db_read_log_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // .statedb.v1.ResultCode result = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statedb.v1.SetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .statedb.v1.Fea old_root = 1;
  if (this->has_old_root()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::old_root(this), target, stream);
  }

  // .statedb.v1.Fea new_root = 2;
  if (this->has_new_root()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::new_root(this), target, stream);
  }

  // .statedb.v1.Fea key = 3;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::key(this), target, stream);
  }

  // map<uint64, .statedb.v1.SiblingList> siblings = 4;
  if (!this->_internal_siblings().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::statedb::v1::SiblingList >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_siblings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_siblings().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::statedb::v1::SiblingList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::statedb::v1::SiblingList >::const_iterator
          it = this->_internal_siblings().begin();
          it != this->_internal_siblings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SetResponse_SiblingsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::statedb::v1::SiblingList >::const_iterator
          it = this->_internal_siblings().begin();
          it != this->_internal_siblings().end(); ++it) {
        target = SetResponse_SiblingsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  // .statedb.v1.Fea ins_key = 5;
  if (this->has_ins_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ins_key(this), target, stream);
  }

  // string ins_value = 6;
  if (this->ins_value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ins_value().data(), static_cast<int>(this->_internal_ins_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "statedb.v1.SetResponse.ins_value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ins_value(), target);
  }

  // bool is_old0 = 7;
  if (this->is_old0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_old0(), target);
  }

  // string old_value = 8;
  if (this->old_value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_old_value().data(), static_cast<int>(this->_internal_old_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "statedb.v1.SetResponse.old_value");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_old_value(), target);
  }

  // string new_value = 9;
  if (this->new_value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_value().data(), static_cast<int>(this->_internal_new_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "statedb.v1.SetResponse.new_value");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_new_value(), target);
  }

  // string mode = 10;
  if (this->mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "statedb.v1.SetResponse.mode");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_mode(), target);
  }

  // uint64 proof_hash_counter = 11;
  if (this->proof_hash_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_proof_hash_counter(), target);
  }

  // map<string, .statedb.v1.FeList> db_read_log = 12;
  if (!this->_internal_db_read_log().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::statedb::v1::FeList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "statedb.v1.SetResponse.DbReadLogEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_db_read_log().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_db_read_log().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::statedb::v1::FeList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::statedb::v1::FeList >::const_iterator
          it = this->_internal_db_read_log().begin();
          it != this->_internal_db_read_log().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SetResponse_DbReadLogEntry_DoNotUse::Funcs::InternalSerialize(12, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::statedb::v1::FeList >::const_iterator
          it = this->_internal_db_read_log().begin();
          it != this->_internal_db_read_log().end(); ++it) {
        target = SetResponse_DbReadLogEntry_DoNotUse::Funcs::InternalSerialize(12, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .statedb.v1.ResultCode result = 13;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statedb.v1.SetResponse)
  return target;
}

size_t SetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statedb.v1.SetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .statedb.v1.SiblingList> siblings = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_siblings_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::statedb::v1::SiblingList >::const_iterator
      it = this->_internal_siblings().begin();
      it != this->_internal_siblings().end(); ++it) {
    total_size += SetResponse_SiblingsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .statedb.v1.FeList> db_read_log = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_db_read_log_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::statedb::v1::FeList >::const_iterator
      it = this->_internal_db_read_log().begin();
      it != this->_internal_db_read_log().end(); ++it) {
    total_size += SetResponse_DbReadLogEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string ins_value = 6;
  if (this->ins_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ins_value());
  }

  // string old_value = 8;
  if (this->old_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_old_value());
  }

  // string new_value = 9;
  if (this->new_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_value());
  }

  // string mode = 10;
  if (this->mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  // .statedb.v1.Fea old_root = 1;
  if (this->has_old_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_root_);
  }

  // .statedb.v1.Fea new_root = 2;
  if (this->has_new_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_root_);
  }

  // .statedb.v1.Fea key = 3;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .statedb.v1.Fea ins_key = 5;
  if (this->has_ins_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ins_key_);
  }

  // .statedb.v1.ResultCode result = 13;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // uint64 proof_hash_counter = 11;
  if (this->proof_hash_counter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_proof_hash_counter());
  }

  // bool is_old0 = 7;
  if (this->is_old0() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statedb.v1.SetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statedb.v1.SetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statedb.v1.SetResponse)
    MergeFrom(*source);
  }
}

void SetResponse::MergeFrom(const SetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statedb.v1.SetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  siblings_.MergeFrom(from.siblings_);
  db_read_log_.MergeFrom(from.db_read_log_);
  if (from.ins_value().size() > 0) {
    _internal_set_ins_value(from._internal_ins_value());
  }
  if (from.old_value().size() > 0) {
    _internal_set_old_value(from._internal_old_value());
  }
  if (from.new_value().size() > 0) {
    _internal_set_new_value(from._internal_new_value());
  }
  if (from.mode().size() > 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.has_old_root()) {
    _internal_mutable_old_root()->::statedb::v1::Fea::MergeFrom(from._internal_old_root());
  }
  if (from.has_new_root()) {
    _internal_mutable_new_root()->::statedb::v1::Fea::MergeFrom(from._internal_new_root());
  }
  if (from.has_key()) {
    _internal_mutable_key()->::statedb::v1::Fea::MergeFrom(from._internal_key());
  }
  if (from.has_ins_key()) {
    _internal_mutable_ins_key()->::statedb::v1::Fea::MergeFrom(from._internal_ins_key());
  }
  if (from.has_result()) {
    _internal_mutable_result()->::statedb::v1::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.proof_hash_counter() != 0) {
    _internal_set_proof_hash_counter(from._internal_proof_hash_counter());
  }
  if (from.is_old0() != 0) {
    _internal_set_is_old0(from._internal_is_old0());
  }
}

void SetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statedb.v1.SetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetResponse::CopyFrom(const SetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statedb.v1.SetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResponse::IsInitialized() const {
  return true;
}

void SetResponse::InternalSwap(SetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  siblings_.Swap(&other->siblings_);
  db_read_log_.Swap(&other->db_read_log_);
  ins_value_.Swap(&other->ins_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_value_.Swap(&other->old_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_value_.Swap(&other->new_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mode_.Swap(&other->mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetResponse, is_old0_)
      + sizeof(SetResponse::is_old0_)
      - PROTOBUF_FIELD_OFFSET(SetResponse, old_root_)>(
          reinterpret_cast<char*>(&old_root_),
          reinterpret_cast<char*>(&other->old_root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GetResponse_SiblingsEntry_DoNotUse::GetResponse_SiblingsEntry_DoNotUse() {}
GetResponse_SiblingsEntry_DoNotUse::GetResponse_SiblingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetResponse_SiblingsEntry_DoNotUse::MergeFrom(const GetResponse_SiblingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetResponse_SiblingsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GetResponse_SiblingsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

GetResponse_DbReadLogEntry_DoNotUse::GetResponse_DbReadLogEntry_DoNotUse() {}
GetResponse_DbReadLogEntry_DoNotUse::GetResponse_DbReadLogEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetResponse_DbReadLogEntry_DoNotUse::MergeFrom(const GetResponse_DbReadLogEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetResponse_DbReadLogEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GetResponse_DbReadLogEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GetResponse::InitAsDefaultInstance() {
  ::statedb::v1::_GetResponse_default_instance_._instance.get_mutable()->root_ = const_cast< ::statedb::v1::Fea*>(
      ::statedb::v1::Fea::internal_default_instance());
  ::statedb::v1::_GetResponse_default_instance_._instance.get_mutable()->key_ = const_cast< ::statedb::v1::Fea*>(
      ::statedb::v1::Fea::internal_default_instance());
  ::statedb::v1::_GetResponse_default_instance_._instance.get_mutable()->ins_key_ = const_cast< ::statedb::v1::Fea*>(
      ::statedb::v1::Fea::internal_default_instance());
  ::statedb::v1::_GetResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::statedb::v1::ResultCode*>(
      ::statedb::v1::ResultCode::internal_default_instance());
}
class GetResponse::_Internal {
 public:
  static const ::statedb::v1::Fea& root(const GetResponse* msg);
  static const ::statedb::v1::Fea& key(const GetResponse* msg);
  static const ::statedb::v1::Fea& ins_key(const GetResponse* msg);
  static const ::statedb::v1::ResultCode& result(const GetResponse* msg);
};

const ::statedb::v1::Fea&
GetResponse::_Internal::root(const GetResponse* msg) {
  return *msg->root_;
}
const ::statedb::v1::Fea&
GetResponse::_Internal::key(const GetResponse* msg) {
  return *msg->key_;
}
const ::statedb::v1::Fea&
GetResponse::_Internal::ins_key(const GetResponse* msg) {
  return *msg->ins_key_;
}
const ::statedb::v1::ResultCode&
GetResponse::_Internal::result(const GetResponse* msg) {
  return *msg->result_;
}
GetResponse::GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  siblings_(arena),
  db_read_log_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:statedb.v1.GetResponse)
}
GetResponse::GetResponse(const GetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  siblings_.MergeFrom(from.siblings_);
  db_read_log_.MergeFrom(from.db_read_log_);
  ins_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ins_value().empty()) {
    ins_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ins_value(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  if (from._internal_has_root()) {
    root_ = new ::statedb::v1::Fea(*from.root_);
  } else {
    root_ = nullptr;
  }
  if (from._internal_has_key()) {
    key_ = new ::statedb::v1::Fea(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_ins_key()) {
    ins_key_ = new ::statedb::v1::Fea(*from.ins_key_);
  } else {
    ins_key_ = nullptr;
  }
  if (from._internal_has_result()) {
    result_ = new ::statedb::v1::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  ::memcpy(&proof_hash_counter_, &from.proof_hash_counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_old0_) -
    reinterpret_cast<char*>(&proof_hash_counter_)) + sizeof(is_old0_));
  // @@protoc_insertion_point(copy_constructor:statedb.v1.GetResponse)
}

void GetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetResponse_statedb_2eproto.base);
  ins_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&root_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_old0_) -
      reinterpret_cast<char*>(&root_)) + sizeof(is_old0_));
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:statedb.v1.GetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ins_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete root_;
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete ins_key_;
  if (this != internal_default_instance()) delete result_;
}

void GetResponse::ArenaDtor(void* object) {
  GetResponse* _this = reinterpret_cast< GetResponse* >(object);
  (void)_this;
}
void GetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResponse& GetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetResponse_statedb_2eproto.base);
  return *internal_default_instance();
}


void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:statedb.v1.GetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  siblings_.Clear();
  db_read_log_.Clear();
  ins_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArena() == nullptr && ins_key_ != nullptr) {
    delete ins_key_;
  }
  ins_key_ = nullptr;
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  ::memset(&proof_hash_counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_old0_) -
      reinterpret_cast<char*>(&proof_hash_counter_)) + sizeof(is_old0_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .statedb.v1.Fea root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .statedb.v1.Fea key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint64, .statedb.v1.SiblingList> siblings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&siblings_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .statedb.v1.Fea ins_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ins_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ins_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ins_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "statedb.v1.GetResponse.ins_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_old0 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_old0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "statedb.v1.GetResponse.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 proof_hash_counter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          proof_hash_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .statedb.v1.FeList> db_read_log = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&db_read_log_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .statedb.v1.ResultCode result = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statedb.v1.GetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .statedb.v1.Fea root = 1;
  if (this->has_root()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::root(this), target, stream);
  }

  // .statedb.v1.Fea key = 2;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  // map<uint64, .statedb.v1.SiblingList> siblings = 3;
  if (!this->_internal_siblings().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::statedb::v1::SiblingList >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_siblings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_siblings().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::statedb::v1::SiblingList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::statedb::v1::SiblingList >::const_iterator
          it = this->_internal_siblings().begin();
          it != this->_internal_siblings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetResponse_SiblingsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::statedb::v1::SiblingList >::const_iterator
          it = this->_internal_siblings().begin();
          it != this->_internal_siblings().end(); ++it) {
        target = GetResponse_SiblingsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  // .statedb.v1.Fea ins_key = 4;
  if (this->has_ins_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ins_key(this), target, stream);
  }

  // string ins_value = 5;
  if (this->ins_value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ins_value().data(), static_cast<int>(this->_internal_ins_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "statedb.v1.GetResponse.ins_value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ins_value(), target);
  }

  // bool is_old0 = 6;
  if (this->is_old0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_old0(), target);
  }

  // string value = 7;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "statedb.v1.GetResponse.value");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_value(), target);
  }

  // uint64 proof_hash_counter = 8;
  if (this->proof_hash_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_proof_hash_counter(), target);
  }

  // map<string, .statedb.v1.FeList> db_read_log = 9;
  if (!this->_internal_db_read_log().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::statedb::v1::FeList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "statedb.v1.GetResponse.DbReadLogEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_db_read_log().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_db_read_log().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::statedb::v1::FeList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::statedb::v1::FeList >::const_iterator
          it = this->_internal_db_read_log().begin();
          it != this->_internal_db_read_log().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetResponse_DbReadLogEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::statedb::v1::FeList >::const_iterator
          it = this->_internal_db_read_log().begin();
          it != this->_internal_db_read_log().end(); ++it) {
        target = GetResponse_DbReadLogEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .statedb.v1.ResultCode result = 10;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statedb.v1.GetResponse)
  return target;
}

size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statedb.v1.GetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .statedb.v1.SiblingList> siblings = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_siblings_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::statedb::v1::SiblingList >::const_iterator
      it = this->_internal_siblings().begin();
      it != this->_internal_siblings().end(); ++it) {
    total_size += GetResponse_SiblingsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .statedb.v1.FeList> db_read_log = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_db_read_log_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::statedb::v1::FeList >::const_iterator
      it = this->_internal_db_read_log().begin();
      it != this->_internal_db_read_log().end(); ++it) {
    total_size += GetResponse_DbReadLogEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string ins_value = 5;
  if (this->ins_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ins_value());
  }

  // string value = 7;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .statedb.v1.Fea root = 1;
  if (this->has_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_);
  }

  // .statedb.v1.Fea key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .statedb.v1.Fea ins_key = 4;
  if (this->has_ins_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ins_key_);
  }

  // .statedb.v1.ResultCode result = 10;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // uint64 proof_hash_counter = 8;
  if (this->proof_hash_counter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_proof_hash_counter());
  }

  // bool is_old0 = 6;
  if (this->is_old0() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statedb.v1.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statedb.v1.GetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statedb.v1.GetResponse)
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statedb.v1.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  siblings_.MergeFrom(from.siblings_);
  db_read_log_.MergeFrom(from.db_read_log_);
  if (from.ins_value().size() > 0) {
    _internal_set_ins_value(from._internal_ins_value());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.has_root()) {
    _internal_mutable_root()->::statedb::v1::Fea::MergeFrom(from._internal_root());
  }
  if (from.has_key()) {
    _internal_mutable_key()->::statedb::v1::Fea::MergeFrom(from._internal_key());
  }
  if (from.has_ins_key()) {
    _internal_mutable_ins_key()->::statedb::v1::Fea::MergeFrom(from._internal_ins_key());
  }
  if (from.has_result()) {
    _internal_mutable_result()->::statedb::v1::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.proof_hash_counter() != 0) {
    _internal_set_proof_hash_counter(from._internal_proof_hash_counter());
  }
  if (from.is_old0() != 0) {
    _internal_set_is_old0(from._internal_is_old0());
  }
}

void GetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statedb.v1.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statedb.v1.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  return true;
}

void GetResponse::InternalSwap(GetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  siblings_.Swap(&other->siblings_);
  db_read_log_.Swap(&other->db_read_log_);
  ins_value_.Swap(&other->ins_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetResponse, is_old0_)
      + sizeof(GetResponse::is_old0_)
      - PROTOBUF_FIELD_OFFSET(GetResponse, root_)>(
          reinterpret_cast<char*>(&root_),
          reinterpret_cast<char*>(&other->root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetProgramResponse::InitAsDefaultInstance() {
  ::statedb::v1::_SetProgramResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::statedb::v1::ResultCode*>(
      ::statedb::v1::ResultCode::internal_default_instance());
}
class SetProgramResponse::_Internal {
 public:
  static const ::statedb::v1::ResultCode& result(const SetProgramResponse* msg);
};

const ::statedb::v1::ResultCode&
SetProgramResponse::_Internal::result(const SetProgramResponse* msg) {
  return *msg->result_;
}
SetProgramResponse::SetProgramResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:statedb.v1.SetProgramResponse)
}
SetProgramResponse::SetProgramResponse(const SetProgramResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::statedb::v1::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:statedb.v1.SetProgramResponse)
}

void SetProgramResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetProgramResponse_statedb_2eproto.base);
  result_ = nullptr;
}

SetProgramResponse::~SetProgramResponse() {
  // @@protoc_insertion_point(destructor:statedb.v1.SetProgramResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetProgramResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void SetProgramResponse::ArenaDtor(void* object) {
  SetProgramResponse* _this = reinterpret_cast< SetProgramResponse* >(object);
  (void)_this;
}
void SetProgramResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetProgramResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetProgramResponse& SetProgramResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetProgramResponse_statedb_2eproto.base);
  return *internal_default_instance();
}


void SetProgramResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:statedb.v1.SetProgramResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetProgramResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .statedb.v1.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetProgramResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statedb.v1.SetProgramResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .statedb.v1.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statedb.v1.SetProgramResponse)
  return target;
}

size_t SetProgramResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statedb.v1.SetProgramResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .statedb.v1.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetProgramResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statedb.v1.SetProgramResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetProgramResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetProgramResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statedb.v1.SetProgramResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statedb.v1.SetProgramResponse)
    MergeFrom(*source);
  }
}

void SetProgramResponse::MergeFrom(const SetProgramResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statedb.v1.SetProgramResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::statedb::v1::ResultCode::MergeFrom(from._internal_result());
  }
}

void SetProgramResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statedb.v1.SetProgramResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetProgramResponse::CopyFrom(const SetProgramResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statedb.v1.SetProgramResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProgramResponse::IsInitialized() const {
  return true;
}

void SetProgramResponse::InternalSwap(SetProgramResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetProgramResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetProgramResponse::InitAsDefaultInstance() {
  ::statedb::v1::_GetProgramResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::statedb::v1::ResultCode*>(
      ::statedb::v1::ResultCode::internal_default_instance());
}
class GetProgramResponse::_Internal {
 public:
  static const ::statedb::v1::ResultCode& result(const GetProgramResponse* msg);
};

const ::statedb::v1::ResultCode&
GetProgramResponse::_Internal::result(const GetProgramResponse* msg) {
  return *msg->result_;
}
GetProgramResponse::GetProgramResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:statedb.v1.GetProgramResponse)
}
GetProgramResponse::GetProgramResponse(const GetProgramResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_result()) {
    result_ = new ::statedb::v1::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:statedb.v1.GetProgramResponse)
}

void GetProgramResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProgramResponse_statedb_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = nullptr;
}

GetProgramResponse::~GetProgramResponse() {
  // @@protoc_insertion_point(destructor:statedb.v1.GetProgramResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProgramResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_;
}

void GetProgramResponse::ArenaDtor(void* object) {
  GetProgramResponse* _this = reinterpret_cast< GetProgramResponse* >(object);
  (void)_this;
}
void GetProgramResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProgramResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProgramResponse& GetProgramResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProgramResponse_statedb_2eproto.base);
  return *internal_default_instance();
}


void GetProgramResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:statedb.v1.GetProgramResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProgramResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .statedb.v1.ResultCode result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProgramResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statedb.v1.GetProgramResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // .statedb.v1.ResultCode result = 2;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statedb.v1.GetProgramResponse)
  return target;
}

size_t GetProgramResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statedb.v1.GetProgramResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .statedb.v1.ResultCode result = 2;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProgramResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statedb.v1.GetProgramResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProgramResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProgramResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statedb.v1.GetProgramResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statedb.v1.GetProgramResponse)
    MergeFrom(*source);
  }
}

void GetProgramResponse::MergeFrom(const GetProgramResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statedb.v1.GetProgramResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_result()) {
    _internal_mutable_result()->::statedb::v1::ResultCode::MergeFrom(from._internal_result());
  }
}

void GetProgramResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statedb.v1.GetProgramResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProgramResponse::CopyFrom(const GetProgramResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statedb.v1.GetProgramResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProgramResponse::IsInitialized() const {
  return true;
}

void GetProgramResponse::InternalSwap(GetProgramResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProgramResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlushResponse::InitAsDefaultInstance() {
  ::statedb::v1::_FlushResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::statedb::v1::ResultCode*>(
      ::statedb::v1::ResultCode::internal_default_instance());
}
class FlushResponse::_Internal {
 public:
  static const ::statedb::v1::ResultCode& result(const FlushResponse* msg);
};

const ::statedb::v1::ResultCode&
FlushResponse::_Internal::result(const FlushResponse* msg) {
  return *msg->result_;
}
FlushResponse::FlushResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:statedb.v1.FlushResponse)
}
FlushResponse::FlushResponse(const FlushResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::statedb::v1::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:statedb.v1.FlushResponse)
}

void FlushResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlushResponse_statedb_2eproto.base);
  result_ = nullptr;
}

FlushResponse::~FlushResponse() {
  // @@protoc_insertion_point(destructor:statedb.v1.FlushResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlushResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void FlushResponse::ArenaDtor(void* object) {
  FlushResponse* _this = reinterpret_cast< FlushResponse* >(object);
  (void)_this;
}
void FlushResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlushResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushResponse& FlushResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlushResponse_statedb_2eproto.base);
  return *internal_default_instance();
}


void FlushResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:statedb.v1.FlushResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .statedb.v1.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statedb.v1.FlushResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .statedb.v1.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statedb.v1.FlushResponse)
  return target;
}

size_t FlushResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statedb.v1.FlushResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .statedb.v1.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statedb.v1.FlushResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlushResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statedb.v1.FlushResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statedb.v1.FlushResponse)
    MergeFrom(*source);
  }
}

void FlushResponse::MergeFrom(const FlushResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statedb.v1.FlushResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::statedb::v1::ResultCode::MergeFrom(from._internal_result());
  }
}

void FlushResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statedb.v1.FlushResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushResponse::CopyFrom(const FlushResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statedb.v1.FlushResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushResponse::IsInitialized() const {
  return true;
}

void FlushResponse::InternalSwap(FlushResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Fea::InitAsDefaultInstance() {
}
class Fea::_Internal {
 public:
};

Fea::Fea(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:statedb.v1.Fea)
}
Fea::Fea(const Fea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fe0_, &from.fe0_,
    static_cast<size_t>(reinterpret_cast<char*>(&fe3_) -
    reinterpret_cast<char*>(&fe0_)) + sizeof(fe3_));
  // @@protoc_insertion_point(copy_constructor:statedb.v1.Fea)
}

void Fea::SharedCtor() {
  ::memset(&fe0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fe3_) -
      reinterpret_cast<char*>(&fe0_)) + sizeof(fe3_));
}

Fea::~Fea() {
  // @@protoc_insertion_point(destructor:statedb.v1.Fea)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Fea::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Fea::ArenaDtor(void* object) {
  Fea* _this = reinterpret_cast< Fea* >(object);
  (void)_this;
}
void Fea::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Fea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fea& Fea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fea_statedb_2eproto.base);
  return *internal_default_instance();
}


void Fea::Clear() {
// @@protoc_insertion_point(message_clear_start:statedb.v1.Fea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fe0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fe3_) -
      reinterpret_cast<char*>(&fe0_)) + sizeof(fe3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 fe0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fe0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fe1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fe1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fe2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fe2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fe3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fe3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statedb.v1.Fea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 fe0 = 1;
  if (this->fe0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_fe0(), target);
  }

  // uint64 fe1 = 2;
  if (this->fe1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_fe1(), target);
  }

  // uint64 fe2 = 3;
  if (this->fe2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_fe2(), target);
  }

  // uint64 fe3 = 4;
  if (this->fe3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_fe3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statedb.v1.Fea)
  return target;
}

size_t Fea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statedb.v1.Fea)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 fe0 = 1;
  if (this->fe0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fe0());
  }

  // uint64 fe1 = 2;
  if (this->fe1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fe1());
  }

  // uint64 fe2 = 3;
  if (this->fe2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fe2());
  }

  // uint64 fe3 = 4;
  if (this->fe3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fe3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statedb.v1.Fea)
  GOOGLE_DCHECK_NE(&from, this);
  const Fea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statedb.v1.Fea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statedb.v1.Fea)
    MergeFrom(*source);
  }
}

void Fea::MergeFrom(const Fea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statedb.v1.Fea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fe0() != 0) {
    _internal_set_fe0(from._internal_fe0());
  }
  if (from.fe1() != 0) {
    _internal_set_fe1(from._internal_fe1());
  }
  if (from.fe2() != 0) {
    _internal_set_fe2(from._internal_fe2());
  }
  if (from.fe3() != 0) {
    _internal_set_fe3(from._internal_fe3());
  }
}

void Fea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statedb.v1.Fea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fea::CopyFrom(const Fea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statedb.v1.Fea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fea::IsInitialized() const {
  return true;
}

void Fea::InternalSwap(Fea* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fea, fe3_)
      + sizeof(Fea::fe3_)
      - PROTOBUF_FIELD_OFFSET(Fea, fe0_)>(
          reinterpret_cast<char*>(&fe0_),
          reinterpret_cast<char*>(&other->fe0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeList::InitAsDefaultInstance() {
}
class FeList::_Internal {
 public:
};

FeList::FeList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fe_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:statedb.v1.FeList)
}
FeList::FeList(const FeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fe_(from.fe_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:statedb.v1.FeList)
}

void FeList::SharedCtor() {
}

FeList::~FeList() {
  // @@protoc_insertion_point(destructor:statedb.v1.FeList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FeList::ArenaDtor(void* object) {
  FeList* _this = reinterpret_cast< FeList* >(object);
  (void)_this;
}
void FeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeList& FeList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeList_statedb_2eproto.base);
  return *internal_default_instance();
}


void FeList::Clear() {
// @@protoc_insertion_point(message_clear_start:statedb.v1.FeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fe_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 fe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_fe(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_fe(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statedb.v1.FeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 fe = 1;
  {
    int byte_size = _fe_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_fe(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statedb.v1.FeList)
  return target;
}

size_t FeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statedb.v1.FeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 fe = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->fe_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fe_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statedb.v1.FeList)
  GOOGLE_DCHECK_NE(&from, this);
  const FeList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statedb.v1.FeList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statedb.v1.FeList)
    MergeFrom(*source);
  }
}

void FeList::MergeFrom(const FeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statedb.v1.FeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fe_.MergeFrom(from.fe_);
}

void FeList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statedb.v1.FeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeList::CopyFrom(const FeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statedb.v1.FeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeList::IsInitialized() const {
  return true;
}

void FeList::InternalSwap(FeList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fe_.InternalSwap(&other->fe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SiblingList::InitAsDefaultInstance() {
}
class SiblingList::_Internal {
 public:
};

SiblingList::SiblingList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sibling_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:statedb.v1.SiblingList)
}
SiblingList::SiblingList(const SiblingList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sibling_(from.sibling_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:statedb.v1.SiblingList)
}

void SiblingList::SharedCtor() {
}

SiblingList::~SiblingList() {
  // @@protoc_insertion_point(destructor:statedb.v1.SiblingList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SiblingList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SiblingList::ArenaDtor(void* object) {
  SiblingList* _this = reinterpret_cast< SiblingList* >(object);
  (void)_this;
}
void SiblingList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiblingList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiblingList& SiblingList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SiblingList_statedb_2eproto.base);
  return *internal_default_instance();
}


void SiblingList::Clear() {
// @@protoc_insertion_point(message_clear_start:statedb.v1.SiblingList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sibling_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiblingList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 sibling = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_sibling(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_sibling(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiblingList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statedb.v1.SiblingList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 sibling = 1;
  {
    int byte_size = _sibling_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_sibling(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statedb.v1.SiblingList)
  return target;
}

size_t SiblingList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statedb.v1.SiblingList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 sibling = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->sibling_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sibling_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiblingList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statedb.v1.SiblingList)
  GOOGLE_DCHECK_NE(&from, this);
  const SiblingList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SiblingList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statedb.v1.SiblingList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statedb.v1.SiblingList)
    MergeFrom(*source);
  }
}

void SiblingList::MergeFrom(const SiblingList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statedb.v1.SiblingList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sibling_.MergeFrom(from.sibling_);
}

void SiblingList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statedb.v1.SiblingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiblingList::CopyFrom(const SiblingList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statedb.v1.SiblingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiblingList::IsInitialized() const {
  return true;
}

void SiblingList::InternalSwap(SiblingList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sibling_.InternalSwap(&other->sibling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiblingList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResultCode::InitAsDefaultInstance() {
}
class ResultCode::_Internal {
 public:
};

ResultCode::ResultCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:statedb.v1.ResultCode)
}
ResultCode::ResultCode(const ResultCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:statedb.v1.ResultCode)
}

void ResultCode::SharedCtor() {
  code_ = 0;
}

ResultCode::~ResultCode() {
  // @@protoc_insertion_point(destructor:statedb.v1.ResultCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResultCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResultCode::ArenaDtor(void* object) {
  ResultCode* _this = reinterpret_cast< ResultCode* >(object);
  (void)_this;
}
void ResultCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResultCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResultCode& ResultCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResultCode_statedb_2eproto.base);
  return *internal_default_instance();
}


void ResultCode::Clear() {
// @@protoc_insertion_point(message_clear_start:statedb.v1.ResultCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .statedb.v1.ResultCode.Code code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::statedb::v1::ResultCode_Code>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResultCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statedb.v1.ResultCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .statedb.v1.ResultCode.Code code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statedb.v1.ResultCode)
  return target;
}

size_t ResultCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statedb.v1.ResultCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .statedb.v1.ResultCode.Code code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statedb.v1.ResultCode)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResultCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statedb.v1.ResultCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statedb.v1.ResultCode)
    MergeFrom(*source);
  }
}

void ResultCode::MergeFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statedb.v1.ResultCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void ResultCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statedb.v1.ResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultCode::CopyFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statedb.v1.ResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultCode::IsInitialized() const {
  return true;
}

void ResultCode::InternalSwap(ResultCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultCode::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace statedb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::statedb::v1::Version* Arena::CreateMaybeMessage< ::statedb::v1::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::SetRequest* Arena::CreateMaybeMessage< ::statedb::v1::SetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::SetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::GetRequest* Arena::CreateMaybeMessage< ::statedb::v1::GetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::SetProgramRequest* Arena::CreateMaybeMessage< ::statedb::v1::SetProgramRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::SetProgramRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::GetProgramRequest* Arena::CreateMaybeMessage< ::statedb::v1::GetProgramRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::GetProgramRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::LoadDBRequest_InputDbEntry_DoNotUse* Arena::CreateMaybeMessage< ::statedb::v1::LoadDBRequest_InputDbEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::LoadDBRequest_InputDbEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::LoadDBRequest* Arena::CreateMaybeMessage< ::statedb::v1::LoadDBRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::LoadDBRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse* Arena::CreateMaybeMessage< ::statedb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::LoadProgramDBRequest_InputProgramDbEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::LoadProgramDBRequest* Arena::CreateMaybeMessage< ::statedb::v1::LoadProgramDBRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::LoadProgramDBRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::SetResponse_SiblingsEntry_DoNotUse* Arena::CreateMaybeMessage< ::statedb::v1::SetResponse_SiblingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::SetResponse_SiblingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::SetResponse_DbReadLogEntry_DoNotUse* Arena::CreateMaybeMessage< ::statedb::v1::SetResponse_DbReadLogEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::SetResponse_DbReadLogEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::SetResponse* Arena::CreateMaybeMessage< ::statedb::v1::SetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::SetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::GetResponse_SiblingsEntry_DoNotUse* Arena::CreateMaybeMessage< ::statedb::v1::GetResponse_SiblingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::GetResponse_SiblingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::GetResponse_DbReadLogEntry_DoNotUse* Arena::CreateMaybeMessage< ::statedb::v1::GetResponse_DbReadLogEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::GetResponse_DbReadLogEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::GetResponse* Arena::CreateMaybeMessage< ::statedb::v1::GetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::GetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::SetProgramResponse* Arena::CreateMaybeMessage< ::statedb::v1::SetProgramResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::SetProgramResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::GetProgramResponse* Arena::CreateMaybeMessage< ::statedb::v1::GetProgramResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::GetProgramResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::FlushResponse* Arena::CreateMaybeMessage< ::statedb::v1::FlushResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::FlushResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::Fea* Arena::CreateMaybeMessage< ::statedb::v1::Fea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::Fea >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::FeList* Arena::CreateMaybeMessage< ::statedb::v1::FeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::FeList >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::SiblingList* Arena::CreateMaybeMessage< ::statedb::v1::SiblingList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::SiblingList >(arena);
}
template<> PROTOBUF_NOINLINE ::statedb::v1::ResultCode* Arena::CreateMaybeMessage< ::statedb::v1::ResultCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statedb::v1::ResultCode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
