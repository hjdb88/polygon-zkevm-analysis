// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: statedb.proto

#include "statedb.pb.h"
#include "statedb.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace statedb {
namespace v1 {

static const char* StateDBService_method_names[] = {
  "/statedb.v1.StateDBService/Set",
  "/statedb.v1.StateDBService/Get",
  "/statedb.v1.StateDBService/SetProgram",
  "/statedb.v1.StateDBService/GetProgram",
  "/statedb.v1.StateDBService/LoadDB",
  "/statedb.v1.StateDBService/LoadProgramDB",
  "/statedb.v1.StateDBService/Flush",
};

std::unique_ptr< StateDBService::Stub> StateDBService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StateDBService::Stub> stub(new StateDBService::Stub(channel));
  return stub;
}

StateDBService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Set_(StateDBService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(StateDBService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetProgram_(StateDBService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProgram_(StateDBService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadDB_(StateDBService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadProgramDB_(StateDBService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Flush_(StateDBService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status StateDBService::Stub::Set(::grpc::ClientContext* context, const ::statedb::v1::SetRequest& request, ::statedb::v1::SetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Set_, context, request, response);
}

void StateDBService::Stub::experimental_async::Set(::grpc::ClientContext* context, const ::statedb::v1::SetRequest* request, ::statedb::v1::SetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

void StateDBService::Stub::experimental_async::Set(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::statedb::v1::SetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

void StateDBService::Stub::experimental_async::Set(::grpc::ClientContext* context, const ::statedb::v1::SetRequest* request, ::statedb::v1::SetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, reactor);
}

void StateDBService::Stub::experimental_async::Set(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::statedb::v1::SetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::statedb::v1::SetResponse>* StateDBService::Stub::AsyncSetRaw(::grpc::ClientContext* context, const ::statedb::v1::SetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::statedb::v1::SetResponse>::Create(channel_.get(), cq, rpcmethod_Set_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::statedb::v1::SetResponse>* StateDBService::Stub::PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::statedb::v1::SetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::statedb::v1::SetResponse>::Create(channel_.get(), cq, rpcmethod_Set_, context, request, false);
}

::grpc::Status StateDBService::Stub::Get(::grpc::ClientContext* context, const ::statedb::v1::GetRequest& request, ::statedb::v1::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

void StateDBService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::statedb::v1::GetRequest* request, ::statedb::v1::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void StateDBService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::statedb::v1::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void StateDBService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::statedb::v1::GetRequest* request, ::statedb::v1::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

void StateDBService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::statedb::v1::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::statedb::v1::GetResponse>* StateDBService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::statedb::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::statedb::v1::GetResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::statedb::v1::GetResponse>* StateDBService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::statedb::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::statedb::v1::GetResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false);
}

::grpc::Status StateDBService::Stub::SetProgram(::grpc::ClientContext* context, const ::statedb::v1::SetProgramRequest& request, ::statedb::v1::SetProgramResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetProgram_, context, request, response);
}

void StateDBService::Stub::experimental_async::SetProgram(::grpc::ClientContext* context, const ::statedb::v1::SetProgramRequest* request, ::statedb::v1::SetProgramResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetProgram_, context, request, response, std::move(f));
}

void StateDBService::Stub::experimental_async::SetProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::statedb::v1::SetProgramResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetProgram_, context, request, response, std::move(f));
}

void StateDBService::Stub::experimental_async::SetProgram(::grpc::ClientContext* context, const ::statedb::v1::SetProgramRequest* request, ::statedb::v1::SetProgramResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetProgram_, context, request, response, reactor);
}

void StateDBService::Stub::experimental_async::SetProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::statedb::v1::SetProgramResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetProgram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::statedb::v1::SetProgramResponse>* StateDBService::Stub::AsyncSetProgramRaw(::grpc::ClientContext* context, const ::statedb::v1::SetProgramRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::statedb::v1::SetProgramResponse>::Create(channel_.get(), cq, rpcmethod_SetProgram_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::statedb::v1::SetProgramResponse>* StateDBService::Stub::PrepareAsyncSetProgramRaw(::grpc::ClientContext* context, const ::statedb::v1::SetProgramRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::statedb::v1::SetProgramResponse>::Create(channel_.get(), cq, rpcmethod_SetProgram_, context, request, false);
}

::grpc::Status StateDBService::Stub::GetProgram(::grpc::ClientContext* context, const ::statedb::v1::GetProgramRequest& request, ::statedb::v1::GetProgramResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProgram_, context, request, response);
}

void StateDBService::Stub::experimental_async::GetProgram(::grpc::ClientContext* context, const ::statedb::v1::GetProgramRequest* request, ::statedb::v1::GetProgramResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProgram_, context, request, response, std::move(f));
}

void StateDBService::Stub::experimental_async::GetProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::statedb::v1::GetProgramResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProgram_, context, request, response, std::move(f));
}

void StateDBService::Stub::experimental_async::GetProgram(::grpc::ClientContext* context, const ::statedb::v1::GetProgramRequest* request, ::statedb::v1::GetProgramResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProgram_, context, request, response, reactor);
}

void StateDBService::Stub::experimental_async::GetProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::statedb::v1::GetProgramResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProgram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::statedb::v1::GetProgramResponse>* StateDBService::Stub::AsyncGetProgramRaw(::grpc::ClientContext* context, const ::statedb::v1::GetProgramRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::statedb::v1::GetProgramResponse>::Create(channel_.get(), cq, rpcmethod_GetProgram_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::statedb::v1::GetProgramResponse>* StateDBService::Stub::PrepareAsyncGetProgramRaw(::grpc::ClientContext* context, const ::statedb::v1::GetProgramRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::statedb::v1::GetProgramResponse>::Create(channel_.get(), cq, rpcmethod_GetProgram_, context, request, false);
}

::grpc::Status StateDBService::Stub::LoadDB(::grpc::ClientContext* context, const ::statedb::v1::LoadDBRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LoadDB_, context, request, response);
}

void StateDBService::Stub::experimental_async::LoadDB(::grpc::ClientContext* context, const ::statedb::v1::LoadDBRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadDB_, context, request, response, std::move(f));
}

void StateDBService::Stub::experimental_async::LoadDB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadDB_, context, request, response, std::move(f));
}

void StateDBService::Stub::experimental_async::LoadDB(::grpc::ClientContext* context, const ::statedb::v1::LoadDBRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadDB_, context, request, response, reactor);
}

void StateDBService::Stub::experimental_async::LoadDB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadDB_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* StateDBService::Stub::AsyncLoadDBRaw(::grpc::ClientContext* context, const ::statedb::v1::LoadDBRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LoadDB_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* StateDBService::Stub::PrepareAsyncLoadDBRaw(::grpc::ClientContext* context, const ::statedb::v1::LoadDBRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LoadDB_, context, request, false);
}

::grpc::Status StateDBService::Stub::LoadProgramDB(::grpc::ClientContext* context, const ::statedb::v1::LoadProgramDBRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LoadProgramDB_, context, request, response);
}

void StateDBService::Stub::experimental_async::LoadProgramDB(::grpc::ClientContext* context, const ::statedb::v1::LoadProgramDBRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadProgramDB_, context, request, response, std::move(f));
}

void StateDBService::Stub::experimental_async::LoadProgramDB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadProgramDB_, context, request, response, std::move(f));
}

void StateDBService::Stub::experimental_async::LoadProgramDB(::grpc::ClientContext* context, const ::statedb::v1::LoadProgramDBRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadProgramDB_, context, request, response, reactor);
}

void StateDBService::Stub::experimental_async::LoadProgramDB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadProgramDB_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* StateDBService::Stub::AsyncLoadProgramDBRaw(::grpc::ClientContext* context, const ::statedb::v1::LoadProgramDBRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LoadProgramDB_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* StateDBService::Stub::PrepareAsyncLoadProgramDBRaw(::grpc::ClientContext* context, const ::statedb::v1::LoadProgramDBRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LoadProgramDB_, context, request, false);
}

::grpc::Status StateDBService::Stub::Flush(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::statedb::v1::FlushResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Flush_, context, request, response);
}

void StateDBService::Stub::experimental_async::Flush(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::statedb::v1::FlushResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, std::move(f));
}

void StateDBService::Stub::experimental_async::Flush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::statedb::v1::FlushResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, std::move(f));
}

void StateDBService::Stub::experimental_async::Flush(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::statedb::v1::FlushResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, reactor);
}

void StateDBService::Stub::experimental_async::Flush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::statedb::v1::FlushResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::statedb::v1::FlushResponse>* StateDBService::Stub::AsyncFlushRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::statedb::v1::FlushResponse>::Create(channel_.get(), cq, rpcmethod_Flush_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::statedb::v1::FlushResponse>* StateDBService::Stub::PrepareAsyncFlushRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::statedb::v1::FlushResponse>::Create(channel_.get(), cq, rpcmethod_Flush_, context, request, false);
}

StateDBService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StateDBService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StateDBService::Service, ::statedb::v1::SetRequest, ::statedb::v1::SetResponse>(
          [](StateDBService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::statedb::v1::SetRequest* req,
             ::statedb::v1::SetResponse* resp) {
               return service->Set(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StateDBService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StateDBService::Service, ::statedb::v1::GetRequest, ::statedb::v1::GetResponse>(
          [](StateDBService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::statedb::v1::GetRequest* req,
             ::statedb::v1::GetResponse* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StateDBService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StateDBService::Service, ::statedb::v1::SetProgramRequest, ::statedb::v1::SetProgramResponse>(
          [](StateDBService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::statedb::v1::SetProgramRequest* req,
             ::statedb::v1::SetProgramResponse* resp) {
               return service->SetProgram(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StateDBService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StateDBService::Service, ::statedb::v1::GetProgramRequest, ::statedb::v1::GetProgramResponse>(
          [](StateDBService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::statedb::v1::GetProgramRequest* req,
             ::statedb::v1::GetProgramResponse* resp) {
               return service->GetProgram(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StateDBService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StateDBService::Service, ::statedb::v1::LoadDBRequest, ::google::protobuf::Empty>(
          [](StateDBService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::statedb::v1::LoadDBRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->LoadDB(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StateDBService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StateDBService::Service, ::statedb::v1::LoadProgramDBRequest, ::google::protobuf::Empty>(
          [](StateDBService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::statedb::v1::LoadProgramDBRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->LoadProgramDB(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StateDBService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StateDBService::Service, ::google::protobuf::Empty, ::statedb::v1::FlushResponse>(
          [](StateDBService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::statedb::v1::FlushResponse* resp) {
               return service->Flush(ctx, req, resp);
             }, this)));
}

StateDBService::Service::~Service() {
}

::grpc::Status StateDBService::Service::Set(::grpc::ServerContext* context, const ::statedb::v1::SetRequest* request, ::statedb::v1::SetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StateDBService::Service::Get(::grpc::ServerContext* context, const ::statedb::v1::GetRequest* request, ::statedb::v1::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StateDBService::Service::SetProgram(::grpc::ServerContext* context, const ::statedb::v1::SetProgramRequest* request, ::statedb::v1::SetProgramResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StateDBService::Service::GetProgram(::grpc::ServerContext* context, const ::statedb::v1::GetProgramRequest* request, ::statedb::v1::GetProgramResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StateDBService::Service::LoadDB(::grpc::ServerContext* context, const ::statedb::v1::LoadDBRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StateDBService::Service::LoadProgramDB(::grpc::ServerContext* context, const ::statedb::v1::LoadProgramDBRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StateDBService::Service::Flush(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::statedb::v1::FlushResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace statedb
}  // namespace v1

